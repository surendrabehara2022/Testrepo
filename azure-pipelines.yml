trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'myconsoleapp'
  acrName: 'acrsqmbqafc'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 1: List contents of MyConsoleApp to verify the Dockerfile exists
- script: |
    ls -R MyConsoleApp
    ls /home/vsts/work/1/s/MyConsoleApp/Dockerfile
  displayName: 'List MyConsoleApp Contents'

- script: |
    if ! command -v docker &> /dev/null
    then
        echo "Docker could not be found"
        exit 1
    else
        echo "Docker is installed"
        docker version
    fi
  displayName: 'Check Docker Installation and Version'

# Step 2: Build Docker Image (with corrected context)
- script: |
    docker build -t $(imageName):$(Build.BuildId) -f '$(Build.SourcesDirectory)/MyConsoleApp/Dockerfile' MyConsoleApp/
  displayName: 'Build Docker Image'

# Step 3: Tag Docker Image (optional but useful for pushing)
- script: |
    docker tag $(imageName):$(Build.BuildId) acrsqmbqafc.azurecr.io/$(imageName):$(Build.BuildId)
  displayName: 'Tag Docker Image'

# Step 1: Azure CLI login using Managed Identity
- task: AzureCLI@2
  inputs:
    azureSubscription: 'acrserviceconnection'  # Your Azure DevOps service connection to the subscription
    scriptType: 'bash'  # Use bash to run commands
    scriptLocation: 'inlineScript'  # Inline script execution
    inlineScript: |
      # Login to Azure Container Registry using Managed Identity
      az acr login --name $(acrName)
  displayName: 'Login to ACR using Managed Identity'

- task: Docker@2
  inputs:
    containerRegistry: 'acrconnection'
    azureSubscription: 'acrserviceconnection'    
    repository: '$(imageName)'
    command: 'push'
    tags: |
      $(Build.BuildId)

#- task: AzureCLI@2
#  inputs:
#    azureSubscription: 'myAzureSubscription'
#    scriptType: 'bash'
#    scriptLocation: 'inlineScript'
#    inlineScript: |
#      az containerapp update \
#        --name mycontainerapp \
#        --resource-group myResourceGroup \
#        --image myacr.azurecr.io/$(imageName):$(Build.BuildId)
#  displayName: 'Deploy to Azure Container App'
